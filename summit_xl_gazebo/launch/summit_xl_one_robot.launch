<?xml version="1.0"?>
<launch>

    <arg name="id_robot" default="robot"/>
    <arg name="prefix" default="$(arg id_robot)_"/>
    <arg name="pad_model" default="$(optenv ROBOT_PAD_MODEL ps4)"/>
    <arg name="x_init_pose" default="0"/>
    <arg name="y_init_pose" default="0"/>
    <arg name="z_init_pose" default="0"/>
    <arg name="xacro_robot_package" default="summit_xl_description"/>
    <arg name="xacro_robot" default="summit_xl_std.urdf.xacro"/>
    <arg name="xacro_robot_path" default="$(eval find(xacro_robot_package) + '/robots/' + xacro_robot)"/>
    <arg name="launch_amcl_and_mapserver" default="false"/>
    <arg name="launch_gmapping" default="false"/>
    <arg name="launch_move_base" default="false"/>
    <arg name="launch_robot_ekf_localization" default="false"/>
    <arg name="robot_ekf_localization_mode" default="odom"/>
    <arg name="map_file" default="empty/empty.yaml"/>
    <arg name="movebase_local_planner" default="teb"/>
    <!-- odom, complete (including gps)-->
    <arg name="omni_drive" default="false"/>
    <arg name="ros_planar_move_plugin" default="false"/>
    <arg name="ros_planar_move_plugin_force_based" default="false"/>
    <arg name="launch_pad" default="false"/>
    <arg name="use_gpu_for_simulation" default="false"/><!-- use_gpu_for_simulation -->
    <arg name="has_pantilt_camera" default="false"/>
    <!-- arm robot -->
    <arg name="launch_arm" default="false"/>
    <arg name="arm_manufacturer" default="trossen"/>
	<arg name="arm_model" default="vx300s"/>
    <arg name="launch_moveit" default="false"/>
    <arg name="arm_prefix" default="$(arg prefix)$(arg arm_model)"/>

    <!-- only for advanced simulation -->
    <arg name="launch_advanced_simulation" default="false"/> <!-- one flag activates all -->
    <arg name="launch_base_hw_sim" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_battery_estimator" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_perception" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_navigation" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_rlc" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_rlc_rostful" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_hmi" default="$(arg launch_advanced_simulation)"/>
    <arg name="rlc_rostful_host" default="localhost"/>
    <arg name="rlc_rostful_port" default="8080"/>
    <arg name="merge_lasers" default="$(arg launch_advanced_simulation)"/>
    <arg name="merge_laser_topics" default="front_laser/scan rear_laser/scan"/>

    <!-- GPS default position of Robotnik at Fuente del Jarro-->
	<arg name="gps_latitude" default="39.5080331"/>
	<arg name="gps_longitude" default="-0.4619816"/>

    <group ns="$(arg id_robot)">

        <!-- Load the URDF into the ROS Parameter Server -->
        <param name="robot_description" command="$(find xacro)/xacro '$(arg xacro_robot_path)'
                prefix:=$(arg prefix)
                ros_planar_move_plugin:=$(arg ros_planar_move_plugin)
                ros_planar_move_plugin_force_based:=$(arg ros_planar_move_plugin_force_based)
                omni_wheels:=$(arg omni_drive)
                gpu:=$(arg use_gpu_for_simulation)
                gps_latitude:='$(arg gps_latitude)'
                gps_longitude:='$(arg gps_longitude)'
                --inorder"/>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
            <remap from="/joint_states" to="joint_states" />
        </node>

        <!-- Spawner model into gazebo -->
        <node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-x $(arg x_init_pose)
                -y $(arg y_init_pose)
                -z $(arg z_init_pose)
                -J $(arg arm_prefix)_joint_1 0.0
                -J $(arg arm_prefix)_joint_2 2.9
                -J $(arg arm_prefix)_joint_3 0.0
                -J $(arg arm_prefix)_joint_4 1.3
                -J $(arg arm_prefix)_joint_5 -2.07
                -J $(arg arm_prefix)_joint_6 1.4
                -J $(arg arm_prefix)_joint_7 0.0
                -J $(arg arm_prefix)_joint_finger_1 0.0
                -J $(arg arm_prefix)_joint_finger_2 0.0
                -J $(arg arm_prefix)_joint_finger_3 0.0
                -J $(arg arm_prefix)_joint_finger_tip_1 1.0
                -J $(arg arm_prefix)_joint_finger_tip_2 1.0
                -J $(arg arm_prefix)_joint_finger_tip_3 1.0
                -urdf
                -param robot_description
                -model $(arg id_robot)" />

        <!-- start summit_xl_control nodes -->
        <include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
            <arg name="id_robot" value="$(arg id_robot)"/>
            <arg name="prefix" value="$(arg prefix)"/>
            <arg name="sim" value="true"/>

            <arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
            <arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>

            <arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
            <arg name="sim_arm_control" value="$(arg launch_arm)"/>
            <arg name="launch_pantilt_camera_controller" value="$(arg has_pantilt_camera)"/>

            <arg name="arm_manufacturer" value="$(arg arm_manufacturer)"/>
            <arg name="arm_model" value="$(arg arm_model)"/>
            <arg name="arm_prefix" value="$(arg arm_prefix)"/>
            <arg name="odom_broadcast_tf" unless="$(arg launch_robot_ekf_localization)" value="true"/>
            <arg name="odom_broadcast_tf" if="$(arg launch_robot_ekf_localization)" value="false"/>

        </include>

        <!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_ekf_localization)" file="$(find summit_xl_localization)/launch/robot_localization_$(arg robot_ekf_localization_mode).launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

        <!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

        <!-- start summit_xl_pad nodes -->
        <include if="$(arg launch_pad)" file="$(find robotnik_pad)/launch/robotnik_pad.launch">
        <arg name="pad_model" value="$(arg pad_model)"/>
        </include>

        <!-- base_hw_sim -->
        <include if="$(arg launch_base_hw_sim)" file="$(find robotnik_base_hw_sim)/launch/summit_xl_hw_sim.launch">
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <group if="$(arg launch_battery_estimator)">
            <!-- start dock_manager node -->
            <include file="$(find charge_manager)/launch/charge_manager.launch">
                <arg name="docker_mode" value="manual_sw"/>
                <arg name="inverted_contact_relay_input" value="false"/>
                <arg name="contact_relay_input_number" value="2"/>
                <arg name="charger_relay_output_number" value="1"/>
            </include>

            <!-- start battery_estimation node -->
            <include file="$(find battery_estimation)/launch/table_battery.launch">
                <arg name="battery_voltage" value="48"/>
                <arg name="read_voltage_from_analog_input" value="true"/>
                <arg name="voltage_analog_input_number" value="1" />
                <arg name="current_analog_input_number" value="2" />
            </include>

        </group>

        <!-- imu_complementary_filter-->
        <node pkg="imu_complementary_filter" type="complementary_filter_node" name="complementary_filter_node" output="screen">
            <remap from="imu/mag" to="mavros/imu/mag"/>
            <param name="fixed_frame" value="$(arg prefix)imu_link"/>
            <param name="publish_tf" value="false"/>
            <param name="publish_debug_topics" value="true"/>
            <param name="do_bias_estimation" value="false"/>
            <param name="do_adaptive_gain" value="true"/>
            <param name="use_mag" value="false"/>
            <param name="gain_acc" value="0.005"/>
            <param name="gain_mag" value="0.001"/>
        </node>


        <!-- amcl and map server base-->
        <include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/map_server.launch">
            <arg name="prefix" value="$(arg prefix)"/>
            <arg name="map_file" value="$(arg map_file)"/>
        </include>
        <include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/amcl.launch">
            <arg name="prefix" value="$(arg prefix)"/>
            <arg if="$(arg omni_drive)" name="odom_model_type" value="omni"/>
            <arg unless="$(arg omni_drive)" name="odom_model_type" value="diff"/>
            <arg name="x_init_pose" value="$(arg x_init_pose)"/>
            <arg name="y_init_pose" value="$(arg y_init_pose)"/>
            <arg name="z_init_pose" value="$(arg z_init_pose)"/>
        </include>

        <!-- move base -->
        <include if="$(arg launch_move_base)" file="$(find summit_xl_navigation)/launch/move_base.launch">
            <arg name="prefix" value="$(arg prefix)"/>
            <arg name="local_planner" value="$(arg movebase_local_planner)"/>
            <arg if="$(arg omni_drive)" name="differential_robot" value="false"/>
            <arg unless="$(arg omni_drive)" name="differential_robot" value="true"/>
        </include>

        <!-- gmapping -->
        <include if="$(arg launch_gmapping)" file="$(find summit_xl_localization)/launch/slam_gmapping.launch">
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <!-- merge lasers -->
        <include if="$(arg merge_lasers)" file="$(find summit_xl_bringup)/launch/merge_laser.launch">
            <arg name="laserscan_topics" value="$(arg merge_laser_topics)"/>
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <!-- MoveGroup Moveit! -->
        <include if="$(arg launch_moveit)" file="$(find summit_xl_j2s7s300_moveit_config)/launch/summit_xl_j2s7s300_moveit_config.launch">
                <!--arg name="sim" value="true"/-->
        </include>

    </group>
<!--
    <include if="$(arg launch_perception)" file="$(find summit_xl_perception)/launch/perception_complete.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="run_reflector_locator" value="true"/>
        <arg name="run_ar_locator" value="true"/>
    </include>
 -->
    <include if="$(arg launch_navigation)" file="$(find summit_xl_navigation)/launch/navigation_complete.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="has_docker" value="true"/>
        <arg name="run_laser_docker" value="true"/>
    </include>
<!--
    <group if="$(arg launch_rlc)">

        <include file="$(find summit_xl_robot_local_control)/launch/robot_local_control.launch">
            <arg name="id_robot" value="$(arg id_robot)"/>
        </include>


        <include if="$(arg launch_rlc_rostful)" file="$(find summit_xl_robot_local_control)/launch/rostful_server.launch">
            <arg name="id_robot" value="$(arg id_robot)"/>
            <arg name="host" value="$(arg rlc_rostful_host)"/>
            <arg name="port" value="$(arg rlc_rostful_port)"/>
        </include>

    </group>
-->
    <include if="$(arg launch_hmi)" file="$(find robotnik_hmi)/launch/robotnik_hmi.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="launch_system_monitor" value="false"/>
    </include>


</launch>
